{"ast":null,"code":"// 配置路由的地方\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n// 使用插件\nVue.use(VueRouter);\n// 引入路由组件\nimport Home from '@/pages/Home';\nimport Login from '@/pages/Login';\nimport Register from '@/pages/Register';\nimport Search from '@/pages/Search';\nimport Detail from '@/pages/Detail';\n\n// 引入路由配置信息\nimport routes from './routes';\n\n// 先把VueRouter原型对象的push，先保存一份\nlet originPush = VueRouter.prototype.push;\n// 先把VueRouter原型对象的replace，先保存一份\nlet originReplace = VueRouter.prototype.replace;\n\n// 重写push|replace方法\n// 第一个参数：跳转位置，第二个参数：成功回调，第三个参数：失败回调\nVueRouter.prototype.push = function (location, resovle, reject) {\n  if (resovle && reject) {\n    // call与apply区别：\n    // 相同点：都可以调用函数一次，都可以篡改函数的上下文一次\n    // 不同点：call与apply传递参数：call参数用逗号隔开，apply用数组\n    originPush.call(this, location, resovle, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n};\n\n// 配置路由\nexport default new VueRouter({\n  routes: routes\n});","map":{"version":3,"names":["Vue","VueRouter","use","Home","Login","Register","Search","Detail","routes","originPush","prototype","push","originReplace","replace","location","resovle","reject","call","resolve"],"sources":["C:/Web-Project/Project-SPH/app/src/router/index.js"],"sourcesContent":["// 配置路由的地方\r\nimport Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\n// 使用插件\r\nVue.use(VueRouter)\r\n// 引入路由组件\r\nimport Home from '@/pages/Home'\r\nimport Login from '@/pages/Login'\r\nimport Register from '@/pages/Register'\r\nimport Search from '@/pages/Search'\r\nimport Detail from '@/pages/Detail'\r\n\r\n// 引入路由配置信息\r\nimport routes from './routes'\r\n\r\n// 先把VueRouter原型对象的push，先保存一份\r\nlet originPush = VueRouter.prototype.push\r\n// 先把VueRouter原型对象的replace，先保存一份\r\nlet originReplace = VueRouter.prototype.replace\r\n\r\n// 重写push|replace方法\r\n// 第一个参数：跳转位置，第二个参数：成功回调，第三个参数：失败回调\r\nVueRouter.prototype.push = function(location,resovle,reject){\r\n    if(resovle && reject){\r\n        // call与apply区别：\r\n        // 相同点：都可以调用函数一次，都可以篡改函数的上下文一次\r\n        // 不同点：call与apply传递参数：call参数用逗号隔开，apply用数组\r\n        originPush.call(this,location,resovle,reject)\r\n    }\r\n    else{\r\n        originPush.call(this,location,()=>{},()=>{})\r\n    }\r\n}\r\n\r\nVueRouter.prototype.replace = function(location,resolve,reject){\r\n    if(resolve && reject){\r\n        originReplace.call(this,location,resolve,reject)\r\n    }\r\n    else{\r\n        originReplace.call(this,location,()=>{},()=>{})\r\n    }\r\n}\r\n\r\n// 配置路由\r\nexport default new VueRouter({\r\n    routes:routes\r\n})"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC;AACAD,GAAG,CAACE,GAAG,CAACD,SAAS,CAAC;AAClB;AACA,OAAOE,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,MAAM,MAAM,gBAAgB;;AAEnC;AACA,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,IAAIC,UAAU,GAAGR,SAAS,CAACS,SAAS,CAACC,IAAI;AACzC;AACA,IAAIC,aAAa,GAAGX,SAAS,CAACS,SAAS,CAACG,OAAO;;AAE/C;AACA;AACAZ,SAAS,CAACS,SAAS,CAACC,IAAI,GAAG,UAASG,QAAQ,EAACC,OAAO,EAACC,MAAM,EAAC;EACxD,IAAGD,OAAO,IAAIC,MAAM,EAAC;IACjB;IACA;IACA;IACAP,UAAU,CAACQ,IAAI,CAAC,IAAI,EAACH,QAAQ,EAACC,OAAO,EAACC,MAAM,CAAC;EACjD,CAAC,MACG;IACAP,UAAU,CAACQ,IAAI,CAAC,IAAI,EAACH,QAAQ,EAAC,MAAI,CAAC,CAAC,EAAC,MAAI,CAAC,CAAC,CAAC;EAChD;AACJ,CAAC;AAEDb,SAAS,CAACS,SAAS,CAACG,OAAO,GAAG,UAASC,QAAQ,EAACI,OAAO,EAACF,MAAM,EAAC;EAC3D,IAAGE,OAAO,IAAIF,MAAM,EAAC;IACjBJ,aAAa,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,EAACI,OAAO,EAACF,MAAM,CAAC;EACpD,CAAC,MACG;IACAJ,aAAa,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,EAAC,MAAI,CAAC,CAAC,EAAC,MAAI,CAAC,CAAC,CAAC;EACnD;AACJ,CAAC;;AAED;AACA,eAAe,IAAIb,SAAS,CAAC;EACzBO,MAAM,EAACA;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}